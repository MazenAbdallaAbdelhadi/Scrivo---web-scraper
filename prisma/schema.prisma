// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


enum UserRole{
  USER
  ADMIN
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole @default(USER)
  accounts      Account[]
  isTwoFactorEnabled Boolean @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  workflows Workflow[]
  workflowExecutions WorkflowExecution[]
  ExecutionPhases ExecutionPhase[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}

model VerificationToken{
  id String @id @default(cuid())
  email String 
  token String @unique
  expires DateTime

  @@unique([email, token])
}


model PasswordResetToken{
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime
  
  @@unique([email, token])
}

model TwoFactorToken{
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime
  
  @@unique([email, token])
}

model TwoFactorConfirmation{
  id String @id @default(cuid())
  userId String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}


model Workflow{
  id String @id @default(cuid())
  userId String 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  name String
  description String?

  definition String
  status String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  executions WorkflowExecution[]

  @@unique([name, userId])
}


model WorkflowExecution{
  id String @id @default(cuid())
  workflowId String
  userId String
  trigger String
  status String
  createdAt DateTime @default(now())
  startedAt DateTime? 
  completedAt DateTime?

  phases ExecutionPhase[]

  workflow Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ExecutionPhase{
  id String @id @default(cuid())
  userId String
  status String
  number Int
  node String
  name String
  startedAt DateTime?
  completedAt DateTime?
  inputs String?
  outputs String?
  creditCost Int?

  workflowExecutionId String
  execution WorkflowExecution @relation(fields: [workflowExecutionId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}